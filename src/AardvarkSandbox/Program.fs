open System
open Aardvark.Base
open Aardvark.Rendering
open Aardvark.Application.Slim
open FShade

[<LocalSize(X = 64)>]
let add1 (n: float32[]) =
    compute {
        let id = getGlobalId().X
        n.[id] <- n.[id] + 1.0f
    }

[<LocalSize(X = 64)>]
let caSimulation (cells: int[]) (rowLength: int) =
    compute {
        let id = getGlobalId().X

        let tl = cells[id - rowLength - 1]
        let t = cells[id - rowLength]
        let tr = cells[id - rowLength + 1]
        let l = cells[id - 1]
        let r = cells[id + 1]
        let bl = cells[id + rowLength - 1]
        let b = cells[id + rowLength]
        let br = cells[id + rowLength + 1]

        let sum = tl + t + tr + l + r + bl + b + br

        if cells.[id] = 1 then
            if sum < 2 || sum > 3 then
                cells.[id] <- 0
        // Otherwise leave alone
        else if sum = 3 then
            cells.[id] <- 1
    // Otherwise leave alone
    }

let printGrid (cells: int[]) (rowLength: int) =
    let printCell (cell: int) =
        if cell = 1 then printf "X" else printf "."

    for y in 0 .. rowLength - 1 do
        for x in 0 .. rowLength - 1 do
            printCell cells.[y * rowLength + x]

        printfn ""

[<EntryPoint; STAThread>]
let main argv =
    Aardvark.Init()

    use app = new OpenGlApplication()

    let runtime = app.Runtime :> IRuntime

    // let testArr = [|
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 1; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 1; 0; 0; 0; 0; 0; 0;
    //     0; 1; 1; 1; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    //     0; 0; 0; 0; 0; 0; 0; 0; 0; 0;
    // |]

    let testArr =
        [| 0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           1
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           1
           0
           0
           0
           0
           0
           0
           0
           1
           1
           1
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0
           0 |]

    let input = runtime.CreateBuffer<int>(testArr)

    let targetWriteShader = runtime.CreateComputeShader caSimulation
    let targetWrite = runtime.NewInputBinding(targetWriteShader)

    // targetWrite.["n"] <- input
    targetWrite.["cells"] <- input
    targetWrite.["rowLength"] <- 10

    targetWrite.Flush()

    let ceilDiv (v: int) (d: int) = if v % d = 0 then v / d else 1 + v / d

    let mk =
        [ ComputeCommand.Bind(targetWriteShader)
          ComputeCommand.SetInput targetWrite
          ComputeCommand.Dispatch(ceilDiv (int input.Count) 64) ]

    let program = runtime.Compile mk

    for i in 1..10 do
        program.Run()

        let result = input.Download()

        printfn "Result %i:" i
        printGrid result 10

    0 // return code

(* Looks good so far:
    Result 1:
    ..........
    ..........
    .X.X......
    ..XX......
    ..X.......
    ..........
    ..........
    ..........
    ..........
    ..........
    Result 2:
    ..........
    ..........
    ...X......
    .X.X......
    ..XX......
    ..........
    ..........
    ..........
    ..........
    ..........
    Result 3:
    ..........
    ..........
    ..X.......
    ...XX.....
    ..XX......
    ..........
    ..........
    ..........
    ..........
    ..........
    Result 4:
    ..........
    ..........
    ...X......
    ....X.....
    ..XXX.....
    ..........
    ..........
    ..........
    ..........
    ..........
    Result 5:
    ..........
    ..........
    ..........
    ..X.X.....
    ...XX.....
    ...X......
    ..........
    ..........
    ..........
    ..........
    Result 6:
    ..........
    ..........
    ..........
    ....X.....
    ..X.X.....
    ...XX.....
    ..........
    ..........
    ..........
    ..........
    Result 7:
    ..........
    ..........
    ..........
    ...X......
    ....XX....
    ...XX.....
    ..........
    ..........
    ..........
    ..........
    Result 8:
    ..........
    ..........
    ..........
    ....X.....
    .....X....
    ...XXX....
    ..........
    ..........
    ..........
    ..........
    Result 9:
    ..........
    ..........
    ..........
    ..........
    ...X.X....
    ....XX....
    ....X.....
    ..........
    ..........
    ..........
    Result 10:
    ..........
    ..........
    ..........
    ..........
    .....X....
    ...X.X....
    ....XX....
    ..........
    ..........
    ..........
*)
